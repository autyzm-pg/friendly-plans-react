// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SignUpFormContainer should match snapshot 1`] = `
<Formik
  enableReinitialize={false}
  initialValues={
    Object {
      "email": "",
      "password": "",
      "termsAccepted": false,
    }
  }
  isInitialValid={false}
  onSubmit={[Function]}
  render={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "termsAccepted",
        "password",
        "email",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "email": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "required": true,
            "undefined": false,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
        "password": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "min": true,
            "required": true,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
        "termsAccepted": BooleanSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "required": true,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {
              true,
            },
            "refs": Map {},
          },
          "_whitelistError": [Function],
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
/>
`;

exports[`SignUpFormContainer should render form correctly 1`] = `
<View>
  <InputItem
    autoCapitalize="none"
    blurOnSubmit={true}
    error=""
    keyboardType="email-address"
    label="Email address"
    textContentType="emailAddress"
    touched={true}
    value="email@domain.com"
  />
  <InputItem
    blurOnSubmit={true}
    error=""
    label="Password"
    secureTextEntry={true}
    textContentType="password"
    touched={true}
    value="topsecretpassword"
  />
  <CheckboxInput
    checked={true}
    error=""
    onPress={[Function]}
    title="I accept "
  >
    <TouchableOpacity
      activeOpacity={0.2}
      onPress={[Function]}
    >
      <StyledText
        style={
          Object {
            "color": "#4F3DD5",
          }
        }
      >
        Terms of Use
      </StyledText>
    </TouchableOpacity>
  </CheckboxInput>
  <Component
    backgroundColor="#4F3DD5"
    containerStyle={
      Object {
        "marginBottom": 20,
        "marginTop": 8,
      }
    }
    loading={false}
    onPress={[MockFunction]}
    title="Sign up"
  />
</View>
`;
